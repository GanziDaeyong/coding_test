#!/usr/bin/env python
# coding: utf-8

# In[ ]:


"""
2016-19620 언어학과 정대용 / 첫 번째 과제. 

아래는 제가 코드를 짜면서 실수했던 점과 완성된 코드에 대한 설명입니다. 시간이 부족하시면 앞에 <포인트> 라고 적어둔 2, 5번만 읽어주셔도 됩니다.


첫 번째 문제의 핵심은 짧고 간결하게 레이어 요소를 비교하는 코드를 짜는 것이라 생각했습니다.

1.
처음에는 전체 레이어(1) - 개별 레이어(5) - 개별 줄(7) 의 3중 리스트 구조로 작성하였습니다.
그리고 대응하는 요소들을 while 문을 이용하여 투명칸인 "2"는 pass, "1"이나 "0"은 break하는 방식을 사용하였습니다.
그러나 기능에 비해 코드가 길고 무거웠으며, 이중 반복문도 수차례 사용되어 별로 적절하지 않다고 생각하였습니다.

2. <포인트>
따라서 7개씩 개별 줄을 리스트로 만들지 않더라도, 개별 레이어 수준에서 한번에 210개를 비교하고, 대응 요소끼리 리스트를 만들었습니다.
그리고 7개씩 줄을 나누는 것은 흑백 값을 모두 찾은 후 마지막 단계에서 진행하였습니다.

3.
레이어의 형태
-------------------------------------------------------------------------------------
레이어 1 - 210개 숫자
레이어 2 - 210개 숫자
...
레이어 5 - 210개 숫자
-------------------------------------------------------------------------------------

4.
대응요소끼리 리스트의 형태
-------------------------------------------------------------------------------------
리스트 1 = [레이어 1 [0], 레이어 2 [0], ... , 레이어 5 [0]]
리스트 2 = [레이어 1 [1], 레이어 2 [1], ... , 레이어 5 [1]]
...
리스트 210 = [레이어 1 [209], 레이어 2 [209], ... , 레이어 5 [209]]
-------------------------------------------------------------------------------------

5. <포인트>
여기서 포인트는, 각 리스트에서 투명 칸인 "2"를 모두 제거하는 것입니다. 
그러면 리스트의 첫 번째 요소가 자연스레 우리가 구하고자 하는 흑백값이 됩니다.
-------------------------------------------------------------------------------------
(예시) [2,2,1,0,1] --------> 2 제거 ---------> [1,0,1] -----------> 첫번째요소 = 1
(예시) [0,2,1,1,2] --------> 2 제거 ---------> [0,1,1,2] ---------> 첫번째요소 = 0
-------------------------------------------------------------------------------------

6.
이렇게 각 리스트에서 첫 번째 요소만 뽑아내어 새로운 리스트에 담았습니다.
이를 다시 30개씩 7줄로 나누어 출력하였습니다.

7. 
제가 마지막까지 고민한 부분은, 어디까지를 함수에 포함시킬지였습니다.
input과 L, H, W 만 입력해도 한번에 답이 나오게 하는 것도 물론 좋은 방법이겠으나,
코드의 재사용성이나 직관성을 위해서는, 함수를 기능별로 나누는 것이 더 좋을 것이라 생각했습니다.
따라서 레이어를 나누는 함수 - 대응요소의 비교를 통해 흑백을 찾는 함수 - 줄을 형성하고 출력하는 함수로 나누었습니다.


"""


# In[2]:


#################이는 주피터 노트북에서 한번에 30개의 숫자를 출력하기 위해 설정한 것입니다. ###############
#주피터 노트북 환경이 아니라면 주석처리해주십시오.

from IPython.core.display import display, HTML
display(HTML("<style>.container { width: 80% !important; }</style>"))

##########################################################################################################

def 레이어별로_나누기 (input, L, H, W):
    input = str(input)
    레이어 = []
    for i in range (L):
        시작번호 = i*(H*W)
        레이어.append(input[시작번호:시작번호+(H*W)])
    return 레이어

def 대응요소끼리_리스트만들고_흑백찾기 (레이어):
    대응요소끼리 = []
    for j in range(len(레이어[0])):
        대응요소끼리_하나씩 = []
        for i in range(len(레이어)):
            대응요소끼리_하나씩.append(레이어[i][j])
        대응요소끼리.append(대응요소끼리_하나씩)
    흑백_찾기 = []
    for 대응요소_리스트들 in 대응요소끼리:
        흑백_찾기.append(list(filter(("2").__ne__, 대응요소_리스트들))[0])
    return 흑백_찾기

def 답_보기(흑백_찾기,H,W):
    for index, value in enumerate(흑백_찾기):
        if value == str(1):
            흑백_찾기[index] = "●" #글씨가 잘 보이라고 1을 임의의 기호로 바꿔주었습니다.
        else:
            흑백_찾기[index] = "○" #글씨가 잘 보이라고 0을 임의의 기호로 바꿔주었습니다.
    최종_리스트 = []
    for i in range (H):
        시작번호 = i*W
        print(흑백_찾기[시작번호:시작번호+W])
        최종_리스트.append(흑백_찾기[시작번호:시작번호+W])
    return 최종_리스트


# input 
input

L, H, W = 5, 7, 30


    
레이어 = 레이어별로_나누기(input, L,W,H)
흑백_찾기 = 대응요소끼리_리스트만들고_흑백찾기 (레이어)
답_보기 = 답_보기(흑백_찾기, H, W)


# In[ ]:




